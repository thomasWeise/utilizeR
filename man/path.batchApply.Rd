% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batchApply.R
\name{path.batchApply}
\alias{path.batchApply}
\title{Process The Files and Sub-Directories in a Directory Recursively (and
Potentially in Parallel)}
\usage{
path.batchApply(path = getwd(), file.single = emptyenv(),
  file.in.folder = emptyenv(), check.directory = function(root, path) TRUE,
  cores = 1L)
}
\arguments{
\item{path}{the path to explore recursively}

\item{file.single}{an environment or named list with file consumers of the
form \code{function(root, path)}, where \code{root} will be the normalized
root path (\code{path}) and \code{path} the path to a file whose name
matches to the regular expression provided as name of consumer}

\item{file.in.folder}{an environment or named list with file consumers of the form
\code{function(root, paths)}, where \code{root} will be the normalized root
path (\code{path}) and \code{paths} is the array of the paths of all files
in a folder whose name matches to the regular expression provided as name
of consumer}

\item{check.directory}{a function of the form \code{function(root, path)}
which returns \code{TRUE} if we should recurse into the directory
\code{path} and \code{false} if not}

\item{cores}{the number of cores to use. If \code{cores <= 1L}, the consumers
are applied sequentially. For \code{cores>1L}, we use the
\code{\link{mclapply}} function provided by the \code{paralle} package to
invoke all the consumers with the specified number of cores}
}
\description{
The sub-folders under a given path are iteratively processed.
For each folder, the function \code{check.directory} returns either
\code{TRUE} if we should investigate it (recursively) or \code{FALSE}, if
we should ignore it. By default we assume \code{TRUE}. Files in a folder
can either be processed one-by-one (via \code{file.single}) or all together
(via \code{file.in.folder}). Both \code{file.single} and
\code{file.in.folder} are environments. The names in these environments are
regular expressions which are matched against the files in the folders. The
values are handler methods of the type \code{function(root, path(s))}.
(\code{paths} for \code{file.in.folder}, \code{path} for
\code{file.single}). These handlers are applied to all the single files
(\code{file.single}) or the list of files in a folder
(\code{file.in.folder}) that match to their names. The names could, e.g.,
be regular expressions matching to file extensions created by
\code{\link{path.extensionRegExp}}.

The processing can either take place sequentially (for values of
\code{core<=1L}) or in parallel (\code{cores>1L}). In the latter case, we
first gather all handler applications that need to be done and then pass
them to \code{\link{mcapply}}.

This function is not supposed to return anything useful. Instead, the idea
is that the handlers would read their input files and create output files
storing their result.
}
\seealso{
path.extensionRegExp
}
